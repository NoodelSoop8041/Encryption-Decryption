def invm(multiple):
    """Finds the inverse of the encryption multiple under mod 26"""

    for x in range(1, 26):
        if (multiple*x) % 26 == 1:
            return x
    return None

def affine_encrypt(text, multiple, shift):
    """Encrypts a text using the Affine Cypher"""

    message = []

    for char in text:
        if char.isalpha():
            char_code = ord(char)
            if char.islower():
                message.append(((((char_code - (ord("a")-1)) * multiple) + shift) % 26))
            else:
                message.append(((((char_code - (ord("A")-1)) * multiple) + shift) % 26))
        else:
            message.append(char)
    
    return message

def affine_decrypt(text, multiple, shift):
    """Decrypts a text using the Affine Cypher"""

    message2 = []

    for char in text:
            if char.isalpha():
                char_code = ord(char)
                if char.islower():
                    message2.append(((invm(multiple)*((char_code - (ord("a")-1))) + shift))%26)
                else:
                    message2.append(((invm(multiple)*((char_code - (ord("A")-1))) + shift))%26)
            else:
                message2.append(char)
        
    return message2

text = input("Enter your message: ")

while True:
    multiple = input("Enter your multiple: ")
    try:
        int(multiple)
    except ValueError:
        print("Please enter a number multiple")
        continue
    else:
        break

while True:
    shift = input("Enter your shift: ")
    try:
        int(multiple)
    except ValueError:
        print("Please enter a number shift")
        continue
    else:
        break

multiple = int(multiple)
shift = int(shift)

print("Message:", affine_encrypt(text, multiple, shift))
print(affine_decrypt(text, multiple, shift))